@page "/search"
@inject SearchTravelPackageService SearchService
@inject NavigationManager Navigation
@using GoTorz.Client.Components

<link rel="stylesheet" href="css/search.css" />

<h3 class="page-header">Søg efter rejsepakker</h3>

<SearchForm OnSearch="HandleSearch" />

<TravelPackageList Packages="travelPackages" OnPackageSelected="HandlePackageSelection" />

<div style="margin-top: 10px; display: flex; gap: 15px;">
    <button @onclick="BookSelectedPackage"
        class="book-btn @(string.IsNullOrEmpty(selectedPackageId) ? "disabled" : "enabled")"
        disabled="@(string.IsNullOrEmpty(selectedPackageId))">
        Book
    </button>
</div>

<TravelPackageDetails Package="selectedPackageDetails" OnClose="CloseDetails" />

@code {
    private List<GoTorz.Shared.Models.TravelPackage> travelPackages = new();
    private string selectedPackageId;
    private GoTorz.Shared.Models.TravelPackage selectedPackageDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllPackages();
    }

    private async Task LoadAllPackages()
    {
        travelPackages = await SearchService.GetTravelPackagesAsync(null, null, null);
    }

    private async Task HandleSearch((string destination, DateTime? arrivalDate, DateTime? departureDate) searchParams)
    {
        travelPackages = await SearchService.GetTravelPackagesAsync(searchParams.destination, searchParams.arrivalDate, searchParams.departureDate);
    }

    private void HandlePackageSelection(string packageId)
    {
        selectedPackageId = packageId;
        selectedPackageDetails = travelPackages.FirstOrDefault(p => p.TravelPackageId == selectedPackageId);
    }

    private void CloseDetails()
    {
        selectedPackageId = null;
        selectedPackageDetails = null;
    }

    private void BookSelectedPackage()
    {
        if (!string.IsNullOrEmpty(selectedPackageId))
        {
            Navigation.NavigateTo($"/register?packageId={selectedPackageId}");
        }
    }
}
