@inject HttpClient Http
@using GoTorz.Shared.DTOs
@using Microsoft.AspNetCore.Components

<h4 class="mt-5">Flights</h4>

@if (loading)
{
    <p>Loading flights...</p>
}
else if (flightResult != null)
{
    <div class="row">
        <div class="col-md-6">
            <h5>Outbound Flight</h5>
            <FlightCard Outbound="@flightResult.OutboundFlight" />
        </div>
        <div class="col-md-6">
            <h5>Return Flight</h5>
            <FlightCard Outbound="@flightResult.ReturnFlight" />
        </div>
    </div>

    @if (!string.IsNullOrEmpty(flightResult.TotalPrice))
    {
        <div class="mt-3">
            <h6>Total flight Price:</h6>
            <p class="text-primary fw-bold">@flightResult.TotalPrice</p>
        </div>
    }
}
else
{
    <p>No direct flights found.</p>
}

@code {
    [Parameter] public string FromAirport { get; set; } = "";
    [Parameter] public string ToAirportId { get; set; } = "";
    [Parameter] public DateTime Departure { get; set; }
    [Parameter] public DateTime Return { get; set; }
    [Parameter] public int Adults { get; set; } = 1;
    [Parameter] public List<int> ChildrenAges { get; set; } = new();
    [Parameter] public EventCallback<FlightSearchResultDto> OnFlightSearchCompleted { get; set; }

    private FlightSearchResultDto? flightResult;
    private bool loading = true;

    // Cache for parameter tracking
    private string? lastFrom;
    private string? lastTo;
    private DateTime lastDeparture;
    private DateTime lastReturn;
    private string lastChildren = "";
    private int lastAdults;

    protected override async Task OnParametersSetAsync()
    {
        string currentChildren = string.Join(",", ChildrenAges);

        // Skip fetch if parameters haven’t changed
        if (FromAirport == lastFrom &&
            ToAirportId == lastTo &&
            Departure == lastDeparture &&
            Return == lastReturn &&
            Adults == lastAdults &&
            currentChildren == lastChildren)
        {
            return;
        }

        // Update cached values
        lastFrom = FromAirport;
        lastTo = ToAirportId;
        lastDeparture = Departure;
        lastReturn = Return;
        lastAdults = Adults;
        lastChildren = currentChildren;

        loading = true;

        string departureDate = Departure.ToString("yyyy-MM-dd");
        string returnDate = Return.ToString("yyyy-MM-dd");

        var apiUrl = $"/api/flightsearch/search-flights" +
                     $"?fromId={FromAirport}&toId={ToAirportId}" +
                     $"&departureDate={departureDate}&returnDate={returnDate}" +
                     $"&adults={Adults}&children={Uri.EscapeDataString(currentChildren)}";

        try
        {
            var result = await Http.GetFromJsonAsync<FlightSearchResultDto>(apiUrl);

            if (result != null)
            {
                flightResult = result;
                await OnFlightSearchCompleted.InvokeAsync(result);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Flight error: " + ex.Message);
        }

        loading = false;
    }
}
