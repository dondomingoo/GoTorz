name: build-and-test

on:
  push:
    branches: [master, develop, feature/static-analysis]
  pull_request:
    branches: [master]

jobs:
  ci: #Continuous Integration - Build and Test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    name: CI - Build/Test on develop
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run tests with coverage
        run: dotnet test --collect:"XPlat Code Coverage" --verbosity normal -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.9
        with:
          reports: '**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline;Cobertura'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport

        # - name: Check consistent code formatting (dotnet format)
        #   run: dotnet format --verify-no-changes
        #   # Disabled to avoid blocking pushes on minor formatting issues.
        #   # Enable later with a proper .editorconfig.



  codeql-analysis: # Static Analysis with CodeQL
    runs-on: ubuntu-latest
    name: Static Analysis - CodeQL
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [csharp]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3



  cd: # Continuous Deployment - Build Docker Images
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    name: CD - Build Docker Images (Manual Push Later)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Log in to Azure
      #   uses: azure/login@v2
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Log in to ACR
      #   run: az acr login --name gotorzacr

      - name: Build and tag API image
        run: |
            docker build -t gotorzacr-aadtajefbqhgcnda.azurecr.io/gotorz-api:latest -f src/GoTorz.Api/Dockerfile .

      - name: Build and tag Client image (hardcoded URL)
        run: |
            docker build \
            --build-arg API_BASE_URL=https://gotorz-api-app-h6ejandxdcg6ccdt.swedencentral-01.azurewebsites.net \
            -t gotorzacr-aadtajefbqhgcnda.azurecr.io/gotorz-client:latest \
            -f src/GoTorz.Client/Dockerfile .

      # You must push manually from local machine until ACR login is configured
      # docker push gotorzacr-aadtajefbqhgcnda.azurecr.io/gotorz-api:latest
      # docker push gotorzacr-aadtajefbqhgcnda.azurecr.io/gotorz-client:latest
