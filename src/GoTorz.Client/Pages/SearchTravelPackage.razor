@page "/search"
@inject ISearchTravelPackageService SearchService
@inject HttpClient Http
@inject NavigationManager Navigation
@using GoTorz.Client.Components
@using GoTorz.Client.Services.Interfaces
@using GoTorz.Shared.Models
@using GoTorz.Shared.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet" href="css/search.css" />

<h3 class="page-header">Søg efter rejsepakker</h3>

<SearchForm OnSearch="HandleSearch" />

<TravelPackageList Packages="travelPackages" OnPackageSelected="HandlePackageSelection" />

@if (selectedPackageDetails is not null)
{
    <div class="row mt-4">
        <div class="col-md-6">
            <TravelPackageDetails Package="selectedPackageDetails" OnClose="CloseDetails" />
        </div>

        <div class="col-md-6">
            <h5>Book this package</h5>
            <EditForm Model="@bookingModel" OnValidSubmit="SubmitBooking">
                <div class="mb-3">
                    <label class="form-label">Full Name</label>
                    <InputText class="form-control" @bind-Value="bookingModel.FullName" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="bookingModel.Email" type="email" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Passport Number</label>
                    <InputText class="form-control" @bind-Value="bookingModel.PassportNumber" required />
                </div>
                <hr />
                <h6>Additional Travellers</h6>

                @foreach (var traveller in bookingModel.Travellers)
                {
                    <div class="mb-3 border p-2">
                        <label>Traveller Name</label>
                        <InputText class="form-control" @bind-Value="traveller.Name" />
                        <label>Passport Number</label>
                        <InputText class="form-control" @bind-Value="traveller.PassportNumber" />
                        <button type="button" class="btn btn-sm btn-danger mt-2" @onclick="() => RemoveTraveller(traveller)">Remove</button>
                    </div>
                }

                @if (bookingModel.Travellers.Count < selectedPackageDetails.NumberOfTravellers - 1)
                {
                    <button type="button" class="btn btn-outline-primary mb-3" @onclick="AddTraveller">
                        + Add Traveller
                    </button>
                }
                else
                {
                    <p class="text-danger">You’ve reached the maximum number of travellers for this package.</p>
                }
                <hr />
                <h6>Total Price</h6>
                <p><strong>@GetTotalPriceString()</strong></p>

                @if (isAuthenticated)
                {
                    <button type="submit" class="btn btn-success">Continue to Payment</button>
                }
                else
                {
                    <p class="text-danger mt-3">You must be logged in to book this package.</p>
                }

            </EditForm>
        </div>
    </div>
}

@code {
    private List<TravelPackage> travelPackages = new();
    private string selectedPackageId;
    private TravelPackage selectedPackageDetails;

    private BookingRequestDto bookingModel = new();
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllPackages();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private string GetTotalPriceString()
    {
        if (selectedPackageDetails == null)
            return "";

        return $"{selectedPackageDetails.Price:0.00} {selectedPackageDetails.Currency}";
    }


    private async Task LoadAllPackages()
    {
        travelPackages = await SearchService.GetTravelPackagesAsync(null, null, null);
    }

    private async Task HandleSearch((string destination, DateTime? arrivalDate, DateTime? departureDate) searchParams)
    {
        travelPackages = await SearchService.GetTravelPackagesAsync(searchParams.destination, searchParams.arrivalDate, searchParams.departureDate);
        selectedPackageId = null;
        selectedPackageDetails = null;
    }

    private void AddTraveller()
    {
        int maxAdditional = selectedPackageDetails.NumberOfTravellers - 1;
        if (bookingModel.Travellers.Count < maxAdditional)
        {
            bookingModel.Travellers.Add(new TravellerDto());
        }
    }

    private void RemoveTraveller(TravellerDto traveller)
    {
        bookingModel.Travellers.Remove(traveller);
    }


    private void HandlePackageSelection(string packageId)
    {
        selectedPackageId = packageId;
        selectedPackageDetails = travelPackages.FirstOrDefault(p => p.TravelPackageId == selectedPackageId);

        bookingModel = new BookingRequestDto
            {
                PackageId = selectedPackageId,
                FullName = "",
                Email = "",
                PassportNumber = "",
                PaymentMethod = "card",
                Currency = string.IsNullOrWhiteSpace(selectedPackageDetails.Currency)
                    ? "eur"
                    : selectedPackageDetails.Currency.ToLower()
            };
    }

    private void CloseDetails()
    {
        selectedPackageId = null;
        selectedPackageDetails = null;
    }

    private async Task SubmitBooking()
    {
        var response = await Http.PostAsJsonAsync("api/Booking/submit-info", bookingModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<BookingResponseDto>();
            if (!string.IsNullOrWhiteSpace(result?.RedirectUrl))
            {
                Navigation.NavigateTo(result.RedirectUrl!, forceLoad: true);
            }
        }
        else
        {
            Console.WriteLine("Booking failed.");
        }
    }
}