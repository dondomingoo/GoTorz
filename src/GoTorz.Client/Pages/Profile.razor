@page "/profile"
@using GoTorz.Client.Services.Interfaces
@using GoTorz.Shared.DTOs.Booking
@using Microsoft.AspNetCore.Authorization
@inject IClientAuthService AuthService
@inject ILocalStorage LocalStorage
@inject IProfileService ProfileService
@inject NavigationManager Navigation
@attribute [Authorize]

<h3>Your Profile</h3>

@if (!string.IsNullOrWhiteSpace(email))
{
    <p><strong>Email:</strong> @email</p>
    <button class="btn btn-danger mb-3" @onclick="DeleteProfile">Delete My Profile</button>
    <button class="btn btn-info mb-3" @onclick="@(() => NavigateTo("/logout"))">
        Logout <small class="text-muted"></small>
    </button>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">@message</div>
}

@if (loadingBookings)
{
    <p>Loading your bookings...</p>
}
else
{
    <h4>Upcoming Trips</h4>
    @if (upcomingBookings.Count == 0)
    {
        <p>No upcoming trips.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Arrival</th>
                    <th>Departure</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in upcomingBookings)
                {
                    <tr>
                        <td>@booking.Arrival.ToShortDateString()</td>
                        <td>@booking.Departure.ToShortDateString()</td>
                        <td>@booking.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h4 class="mt-4">Past Trips</h4>
    @if (pastBookings.Count == 0)
    {
        <p>You have no completed trips yet.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Arrival</th>
                    <th>Departure</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in pastBookings)
                {
                    <tr>
                        <td>@booking.Arrival.ToShortDateString()</td>
                        <td>@booking.Departure.ToShortDateString()</td>
                        <td>@booking.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private string? email;
    private string? message;
    private bool isSuccess;
    private bool loadingBookings = true;

    private List<BookingDto> upcomingBookings = new();
    private List<BookingDto> pastBookings = new();

    protected override async Task OnInitializedAsync()
    {
        email = await LocalStorage.GetItemAsync("email");

        var (upcoming, past) = await ProfileService.GetMyBookingsAsync();
        upcomingBookings = upcoming;
        pastBookings = past;

        loadingBookings = false;
    }

    private async Task DeleteProfile()
    {
        message = null;
 
        var (success, msg) = await ProfileService.DeleteUserAsync();
        isSuccess = success;
        message = msg;

        if (success)
        {
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/");
        }
    }

    private void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

}
